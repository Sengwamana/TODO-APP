<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Task Manager</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const submitButton = document.querySelector('#submit');
            const todoInput = document.querySelector('#todo');
            const taskList = document.querySelector('#Task');
            const toggleDarkMode = document.querySelector('#toggle-dark-mode');
            const prioritySelector = document.querySelector('#priority');

            // Load tasks from localStorage on page load
            loadTasks();

            // By default, submit is disabled
            submitButton.disabled = true;

            // Enable submit button when there's input
            todoInput.onkeyup = function() {
                submitButton.disabled = todoInput.value.trim().length === 0;
            };

            // Handle form submission
            document.querySelector('form').onsubmit = function(event) {
                event.preventDefault();
                addTask(todoInput.value, prioritySelector.value);
                todoInput.value = '';
                submitButton.disabled = true;
            };

            // Function to add task to the list and save to localStorage
            function addTask(task, priority) {
                const taskObject = { id: Date.now(), task, priority };
                const li = createTaskElement(taskObject);
                taskList.appendChild(li);
                saveTask(taskObject);
                showFeedback('Task added successfully!', 'success');
            }

            // Function to create a task element
            function createTaskElement(taskObject) {
                const li = document.createElement('li');
                li.classList.add('task-item');
                li.setAttribute('data-id', taskObject.id);
                li.innerHTML = `
                    <span class="task-text">${taskObject.task}</span>
                    <span class="task-priority ${taskObject.priority.toLowerCase()}">${taskObject.priority}</span>
                    <button class="delete-btn" aria-label="Delete Task"><i class="fas fa-trash"></i></button>
                `;
                li.querySelector('.delete-btn').addEventListener('click', function() {
                    li.classList.add('fade-out');
                    li.addEventListener('transitionend', () => {
                        removeTask(taskObject.id);
                        li.remove();
                        showFeedback('Task removed!', 'error');
                    });
                });
                return li;
            }

            // Function to save a task to localStorage
            function saveTask(task) {
                const tasks = getTasksFromLocalStorage();
                tasks.push(task);
                localStorage.setItem('tasks', JSON.stringify(tasks));
            }

            // Function to remove a task from localStorage
            function removeTask(taskId) {
                const tasks = getTasksFromLocalStorage();
                const filteredTasks = tasks.filter(task => task.id !== taskId);
                localStorage.setItem('tasks', JSON.stringify(filteredTasks));
            }

            // Function to get tasks from localStorage
            function getTasksFromLocalStorage() {
                return JSON.parse(localStorage.getItem('tasks')) || [];
            }

            // Function to load tasks from localStorage
            function loadTasks() {
                const tasks = getTasksFromLocalStorage();
                tasks.forEach(task => {
                    const li = createTaskElement(task);
                    taskList.appendChild(li);
                });
            }

            // Function to show feedback messages
            function showFeedback(message, type) {
                const feedback = document.createElement('div');
                feedback.className = `feedback ${type}`;
                feedback.innerText = message;
                document.body.appendChild(feedback);

                setTimeout(() => {
                    feedback.classList.add('fade-out');
                    feedback.addEventListener('transitionend', () => feedback.remove());
                }, 2000);
            }

            // Dark Mode Toggle
            toggleDarkMode.addEventListener('click', () => {
                document.body.classList.toggle('dark-mode');
                toggleDarkMode.innerText = document.body.classList.contains('dark-mode') ? 'Light Mode' : 'Dark Mode';
            });
        });
    </script>
    <style>
/* Global Styles */
* {
    font-family: 'Roboto', sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: #f0f2f5;
    color: #3d3d3d;
    transition: background-color 0.3s, color 0.3s;
}

.dark-mode {
    background-color: #181818;
    color: #e0e0e0;
}

.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 1000px;
    width: 100%;
    padding: 20px;
    gap: 20px;
}

.form-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: 400px;
}

form {
    background: #ffffff;
    padding: 25px;
    border-radius: 20px;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
    text-align: center;
    transition: background-color 0.3s, box-shadow 0.3s;
}

.dark-mode form {
    background: #242424;
    box-shadow: 0 12px 24px rgba(255, 255, 255, 0.1);
}

h1 {
    color: #3d3d3d;
    font-size: 30px;
    margin-bottom: 20px;
    margin-right: auto;
    font-weight: 700;
}

.dark-mode h1 {
    color: #f0f2f5;
}

input[type="text"], select {
    width: 100%;
    padding: 15px;
    margin-bottom: 15px;
    border: 2px solid #dfe1e5;
    border-radius: 50px;
    font-size: 16px;
    background-color: #f9f9f9;
    transition: border-color 0.3s;
}

.dark-mode input[type="text"], .dark-mode select {
    border: 2px solid #444;
    background-color: #2a2a2a;
    color: #e0e0e0;
}

input[type="text"]:focus, select:focus {
    outline: none;
    border-color: #8e44ad;
}

input[type="submit"] {
    width: 100%;
    padding: 15px;
    border: none;
    border-radius: 50px;
    background-color: #8e44ad;
    color: #ffffff;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s;
}

input[type="submit"]:hover {
    background-color: #732d91;
}

input[type="submit"]:disabled {
    cursor: not-allowed;
    background-color: #b79dd0;
}

.task-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    width: 100%;
    margin-top: 20px;
}

li.task-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background-color: #ffffff;
    border-radius: 20px;
    color: #3d3d3d;
    font-size: 16px;
    transition: transform 0.2s ease, background-color 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
}

.dark-mode li.task-item {
    background-color: #2a2a2a;
    color: #e0e0e0;
    box-shadow: 0 8px 16px rgba(255, 255, 255, 0.1);
}

li.task-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
}

.task-text {
    flex-grow: 1;
    margin-right: 10px;
}

.task-priority {
    padding: 8px 12px;
    border-radius: 10px;
    font-size: 14px;
    font-weight: 600;
}

.high {
    background-color: #e74c3c;
    color: #fff;
}

.medium {
    background-color: #f39c12;
    color: #fff;
}

.low {
    background-color: #27ae60;
    color: #fff;
}

li.task-item.fade-out {
    opacity: 0;
    transform: translateX(100%);
    transition: opacity 0.5s, transform 0.5s;
}

.delete-btn {
    background: none;
    border: none;
    color: #e74c3c;
    font-size: 20px;
    cursor: pointer;
    transition: color 0.3s;
}

.delete-btn:hover {
    color: #c0392b;
}

.toggle-dark-mode {
    padding: 10px 20px;
    border: none;
    border-radius: 50px;
    background-color: #8e44ad;
    color: #fff;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.toggle-dark-mode:hover {
    background-color: #732d91;
}

.feedback {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #8e44ad;
    color: #fff;
    padding: 10px 20px;
    border-radius: 20px;
    font-size: 14px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    opacity: 0.9;
    transition: opacity 0.3s ease, transform 0.3s ease;
}

.feedback.fade-out {
    opacity: 0;
    transform: translateY(20px);
}

.success {
    background-color: #27ae60;
}

.error {
    background-color: #e74c3c;
}

    </style>
</head>
<body>
    <div class="container">
        <form>
            <div class="form-header">
                <h1 id="task-form">Task Manager</h1>
                <button type="button" id="toggle-dark-mode" class="toggle-dark-mode">Dark Mode</button>
            </div>
            <input autofocus type="text" id="todo" aria-label="New Task" placeholder="Enter a new task">
            <select id="priority" aria-label="Task Priority">
                <option value="High">High Priority</option>
                <option value="Medium">Medium Priority</option>
                <option value="Low">Low Priority</option>
            </select>
            <input type="submit" value="Add Task" id="submit">
        </form>
        <ul id="Task" class="task-list" aria-live="polite"></ul>
    </div>
</body>
</html>
